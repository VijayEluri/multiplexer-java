<?xml version="1.0" encoding="utf-8"?>
<project name="JMX" default="all" basedir=".">

  <!-- version -->
  <property name="version" value="0.9" />

  <property name="src" location="src" />
  <property name="examples.src" location="examples" />
  <property name="test.src" location="test" />

  <property name="build.dir" location="bin" />
  <property name="doc.dir" location="doc" />
  <property name="dist.dir" location="dist" />
  <property name="libs" location="libs" />
  <property name="libs.unpacked.dir" location="deps" />

  <property name="debug" value="false" />
  <property name="compatibility" value="1.5" />

  <property name="jmx.jar.main-class" value="multiplexer.jmx.tools.Runner" />

  <property name="system.rules" location="system.rules" />
  <property name="constants.src"
            value="${src}/multiplexer/protocol/Constants.java" />
  <property name="protocol.proto.src" location="Multiplexer.proto" />
  <!-- the property ${protocol.protobuf.classes} must match generation options
       set up in ${protocol.proto.src} -->
  <property name="protocol.protobuf.classes"
            location="${src}/multiplexer/protocol/Protocol.java" />


  <property name="test.rules" location="test.rules" />
  <property name="test.constants.src"
            value="${test.src}/multiplexer/jmx/test/TestConstants.java" />

  <path id="project.tools.path">
    <pathelement location="${build.dir}" />
    <pathelement location="${libs}/protobuf-java-2.2.0.jar" />
    <pathelement location="${libs}/args4j-2.0.10.jar" />
    <pathelement location="${libs}/freemarker-2.3.15.jar" />
    <pathelement location="${libs}/guava-r07.jar" />
  </path>

  <filelist id="project.jar.dependencies" dir="${basedir}">
    <file name="${libs}/protobuf-java-2.2.0.jar" />
    <file name="${libs}/netty-3.2.3.Final.jar" />
    <file name="${libs}/guava-r07.jar" />
    <file name="${libs}/trove-2.0.4.jar" />
    <file name="${libs}/args4j-2.0.10.jar" />
    <file name="${libs}/freemarker-2.3.15.jar" />
    <file name="${libs}/slf4j-api-1.5.8.jar" />
    <file name="${libs}/slf4j-jdk14-1.5.8.jar" />
  </filelist>

  <path id="project.dependencies.path">
    <filelist refid="project.jar.dependencies" />
  </path>

  <path id="project.class.path">
    <pathelement location="${build.dir}" />
    <path refid="project.dependencies.path" />
  </path>

  <path id="project.test.class.path">
    <path refid="project.class.path" />
    <pathelement location="${libs}/junit-4.6.jar" />
  </path>

  <!-- - - - - - - - - - - - - - - - - - 
          target: init                      
         - - - - - - - - - - - - - - - - - -->
  <target name="init">
    <mkdir dir="${build.dir}" />
  </target>

  <!-- ================================= 
          target: all              
         ================================= -->
  <target name="all"
          depends="build,test,jar,doc"
          description="run standard targets" />

  <!-- macro compile-constants -->
  <macrodef name="compile-constants">
    <attribute name="input" />
    <attribute name="output" />
    <attribute name="outdir" />
    <element name="compile-additional-args" optional="true" />
    <sequential>
      <copy todir="${build.dir}">
        <fileset dir="${src}" includes="**/*.template" />
      </copy>
      <javac srcdir="${src}"
             destdir="${build.dir}"
             encoding="utf8"
             classpathref="project.tools.path"
             includes="multiplexer/jmx/tools/CompileConstants.java" />
      <echo message="Creating @{output} from @{input}" />
      <java classname="multiplexer.jmx.tools.CompileConstants"
            failonerror="true">
        <arg value="-input" />
        <arg value="@{input}" />
        <arg value="-outdir" />
        <arg value="@{outdir}" />
        <arg value="-output" />
        <arg value="@{output}" />
        <compile-additional-args />
        <classpath refid="project.tools.path" />
      </java>
    </sequential>
  </macrodef>

  <!-- - - - - - - - - - - - - - - - - - 
          target: constants                      
         - - - - - - - - - - - - - - - - - -->
  <target name="constants"
          depends="init,constants.check"
          unless="constants.notRequired">
    <compile-constants input="${system.rules}"
                       outdir="${src}"
                       output="${constants.src}">
      <compile-additional-args>
        <arg value="-system" />
      </compile-additional-args>
    </compile-constants>
  </target>
  <target name="constants.check" depends="init">
    <uptodate property="constants.notRequired"
              srcfile="${system.rules}"
              targetfile="${constants.src}" />
  </target>

  <!-- - - - - - - - - - - - - - - - - - 
          target: test-constants                      
         - - - - - - - - - - - - - - - - - -->
  <target name="test-constants"
          depends="init,test-constants.check"
          unless="test-constants.notRequired">
    <compile-constants input="${test.rules}"
                       outdir="${test.src}"
                       output="${test.constants.src}">
    </compile-constants>
  </target>
  <target name="test-constants.check">
    <uptodate property="test-constants.notRequired"
              srcfile="${test.rules}"
              targetfile="${test.constants.src}" />
  </target>

  <!-- - - - - - - - - - - - - - - - - - 
          target: protocol                      
         - - - - - - - - - - - - - - - - - -->
  <target name="protocol"
          depends="protocol.check"
          unless="protocol.notRequired">
    <exec executable="protoc" failonerror="true">
      <arg value="-I" />
      <arg value="${basedir}" />
      <arg value="--java_out" />
      <arg value="${src}" />
      <arg value="${protocol.proto.src}" />
    </exec>
  </target>
  <target name="protocol.check">
    <uptodate property="protocol.notRequired"
              srcfile="${protocol.proto.src}"
              targetfile="${protocol.protobuf.classes}" />
  </target>

  <!-- - - - - - - - - - - - - - - - - - 
          target: sources                      
         - - - - - - - - - - - - - - - - - -->
  <target name="sources"
          depends="constants,protocol"
          description="create the sources that are generated" />

  <!-- - - - - - - - - - - - - - - - - - 
          target: test-sources                      
         - - - - - - - - - - - - - - - - - -->
  <target name="test-sources"
          depends="sources,test-constants"
          description="create the test sources that are generated" />

  <!-- ================================= 
          target: build              
         ================================= -->
  <target name="build"
          depends="init,sources"
          description="compiles the sources with debug=${debug}">
    <javac srcdir="${src}"
           destdir="${build.dir}"
           classpathref="project.class.path"
           source="${compatibility}"
           target="${compatibility}"
           encoding="utf8"
           debug="${debug}"
           debuglevel="lines,vars,source">
    </javac>
  </target>

  <!-- ================================= 
          target: jar              
         ================================= -->
  <target name="jar"
          depends="jar-bin, jar-src, jar-bin-with-dependencies"
          description="create distributable jars" />

  <!-- =================================
          target: jar-bin
         ================================= -->
  <target name="jar-bin"
          depends="build"
          description="create distributable jar with compiled classes">
    <mkdir dir="${dist.dir}" />
    <jar destfile="${dist.dir}/jmx-${version}.jar"
         manifestencoding="utf8"
         index="true"
         basedir="${build.dir}">
      <manifest>
        <attribute name="Main-Class" value="${jmx.jar.main-class}" />
      </manifest>
    </jar>
  </target>

  <!-- - - - - - - - - - - - - - - - - -
          target: jar-src
         - - - - - - - - - - - - - - - - - -->
  <target name="jar-src" depends="sources">
    <mkdir dir="${dist.dir}" />
    <jar destfile="${dist.dir}/jmx-${version}-src.jar"
         manifestencoding="utf8"
         index="true"
         basedir="${src}">
    </jar>
  </target>

  <!-- - - - - - - - - - - - - - - - - -
          target: jar-bin-with-dependencies
         - - - - - - - - - - - - - - - - - -->
  <target name="jar-bin-with-dependencies"
          depends="jar-bin, check-jar-bin-with-dependencies"
          unless="jar-bin-with-dependencies.notRequired">
    <mkdir dir="${dist.dir}" />
    <!-- unjar all the included libraries -->
    <mkdir dir="${libs.unpacked.dir}" />
    <unjar dest="${libs.unpacked.dir}">
      <filelist refid="project.jar.dependencies" />
    </unjar>
    <jar destfile="${dist.dir}/jmx-${version}-withdeps.jar"
         manifestencoding="utf8"
         index="true"
         basedir="${build.dir}">
      <manifest>
        <attribute name="Main-Class" value="${jmx.jar.main-class}" />
      </manifest>
      <fileset dir="${libs.unpacked.dir}" />
    </jar>
  </target>
  <target name="check-jar-bin-with-dependencies">
    <uptodate property="jar-bin-with-dependencies.notRequired"
              targetfile="${dist.dir}/jmx-${version}-withdeps.jar">
      <srcfiles dir="${build.dir}" />
    </uptodate>
  </target>

  <!-- - - - - - - - - - - - - - - - - - 
          target: build-test
         - - - - - - - - - - - - - - - - - -->
  <target name="build-test" depends="init,build,test-sources">
    <mkdir dir="${build.dir}" />
    <javac srcdir="${test.src}"
           destdir="${build.dir}"
           source="${compatibility}"
           target="${compatibility}"
           encoding="utf8"
           debug="${debug}"
           debuglevel="lines,vars,source">
      <classpath refid="project.class.path" />
      <classpath refid="project.test.class.path" />
    </javac>
  </target>

  <!-- ================================= 
          target: test              
         ================================= -->
  <target name="test" depends="build-test" description="run tests">
    <junit printsummary="true" fork="true" haltonfailure="true">
      <sysproperty key="java.util.logging.config.file"
                   value="jul.test.properties" />
      <assertions>
        <enable />
      </assertions>
      <!--classpath refid="project.class.path" /-->
      <classpath refid="project.test.class.path" />

      <formatter type="plain" />

      <test name="multiplexer.jmx.test.TestConnectivity" />
      <test name="multiplexer.jmx.test.TestQuery" />
      <test name="multiplexer.jmx.test.TestMultiplexerMessageWithServer" />
      <test name="multiplexer.jmx.test.TestMultiplexerProtocolHandlerWithServer" />
      <test name="multiplexer.jmx.test.TestByteBufferSerialization" />
      <test name="multiplexer.jmx.test.TestGCing" />
      <test name="multiplexer.jmx.test.TestMultiplexerPassword" />
      <test name="multiplexer.jmx.test.TestThreadsShutdown" />
    </junit>
  </target>

  <!-- ================================= 
          target: doc              
         ================================= -->
  <target name="doc" depends="init,constants" description="generates Javadoc">
    <javadoc access="protected"
             author="true"
             classpathref="project.dependencies.path"
             destdir="${doc.dir}"
             sourcepath="${src}:${examples.src}"
             encoding="utf8"
             nodeprecated="false"
             nodeprecatedlist="false"
             noindex="false"
             nonavbar="false"
             notree="false"
             source="${compatibility}"
             splitindex="true"
             use="true"
             version="true">
      <link href="http://java.sun.com/javase/6/docs/api/" />
      <link href="http://code.google.com/apis/protocolbuffers/docs/reference/java/" />
      <link href="http://www.jboss.org/file-access/default/members/netty/freezone/api/3.1/" />
      <link href="http://google-collections.googlecode.com/svn/trunk/javadoc/" />
      <package name="*" />
    </javadoc>
  </target>

  <!-- ================================= 
          target: dist              
         ================================= -->
  <target name="dist"
          depends="dist.check.possible, dist-not-possible, sources, test-sources, test, jar, doc, build-dist"
          if="dist.possible"
          description="builds a distributable package" />
  <!-- - - - - - - - - - - - - - - - - - 
          target: build-dist                      
         - - - - - - - - - - - - - - - - - -->
  <target name="build-dist">
    <property name=".tardirname" value="jmx-${version}" />
    <script language="beanshell">
      <![CDATA[
      import org.apache.tools.ant.taskdefs.Tar;
      import java.util.*;
      import java.io.*;
      // Create a list of files to tar.
      files = new ArrayList();
      for  (String i : new String[] { "src", "examples.src", "test.src",
              "dist.dir", "doc.dir", "test.rules", "system.rules",
              "protocol.proto.src", "libs" }) {
          path = project.getProperty(i);
          if (!path.startsWith(basedir + File.separatorChar)) {
              project.log(self, "Warning: path " + path +
                  " does not start with basedir " + basedir + ".",
                  project.MSG_WARN);
          } else {
              path = path.substring((basedir + File.separatorChar).length());
          }
          files.add(path);
      }
      files.addAll(Arrays.asList(new String[] { ".classpath", ".settings",
          "build.xml", "ant" }));
      
      prefix = project.getProperty(".tardirname");
      
      tar = project.createTask("tar");
      tar.setDestFile(new File(prefix + ".tar.gz"));
      
      Tar.TarLongFileMode longFile = new Tar.TarLongFileMode();
      longFile.setValue(Tar.TarLongFileMode.GNU);
      tar.setLongfile(longFile);
      
      compression = new Tar.TarCompressionMethod();
      compression.setValue("gzip");
      tar.setCompression(compression);
      
      for (path : files) {
          File file = new File(basedir + File.separatorChar + path);
          if (!file.exists()) {
              project.log(self, "Warning: file not found " + file,
                  project.MSG_WARN);
          } else {
              tfs = tar.createTarFileSet();
              if (file.isDirectory()) {
                  tfs.setDir(file);
                  tfs.setPrefix(prefix + File.separatorChar + path);
              } else {
                  tfs.setFile(file);
                  tfs.setPrefix(prefix + File.separatorChar);
              }
          }
      }
      
      tar.execute();
      ]]>
    </script>
  </target>
  <!-- - - - - - - - - - - - - - - - - - 
          target: dist.check.possible                      
         - - - - - - - - - - - - - - - - - -->
  <target name="dist.check.possible">
    <available classname="org.apache.bsf.BSFException"
               property="dist.possible" />
  </target>
  <!-- - - - - - - - - - - - - - - - - - 
            target: dist-not-possible                      
           - - - - - - - - - - - - - - - - - -->
  <target name="dist-not-possible"
          unless="dist.possible"
          depends="dist.check.possible">
    <fail message="Make sure you passed '-lib ant/libs' option to ant. BSF, BeanShell and Apache Commons Logging are required." />
  </target>


  <!-- ================================= 
          target: clean              
         ================================= -->
  <target name="clean" description="removes less important generated files">
    <delete dir="${build.dir}" />
    <delete dir="${libs.unpacked.dir}" />
    <delete dir="${doc.dir}" />
    <delete dir="${dist.dir}" />
    <delete file="${constants.src}" />
    <delete file="${test.constants.src}" />
  </target>

</project>
